//----------- EXTRA PROPERTIES
ext {
    scalaVersion = '2.12'
    _gradleVersion = '4.2.1'
    targetDir = 'target'
    targetWebapp = targetDir + '/classes/main/webapp'

    webappDir = 'src/main/webapp'
    webappPublic = webappDir + '/public'
    webappElm = webappDir + '/elm'
    webappSass = webappDir + '/sass'

    elmTestDir = 'src/test/elm'
}

//----------- GENERAL
buildDir = targetDir

apply plugin: 'idea'

idea {
    module {
        inheritOutputDirs = false
        outputDir = file(targetDir + '/classes/main')
        testOutputDir = file(targetDir + '/classes/test')
    }
}

//----------- SCALA
apply from: 'scala.gradle'

//----------------- ELM
FileTree elmFiles = fileTree(dir: project.file(webappElm)).include('**/*').exclude('**/elm-stuff/**')

task elmNuke(type: Delete) {
    group 'Build'
    description 'Removes elm_stuff folder'
    delete webappElm + "/elm-stuff"
}

task elmTestNuke(type: Delete) {
    group 'Build'
    description 'Removes elm_stuff folder'
    delete elmTestDir + '/elm-stuff'
}

task elmInstall(type: Exec) {
    group 'Build'
    description 'Installs elm dependencies'
    workingDir webappElm
    commandLine 'elm-install'
}

task elmTestInstall(type: Exec) {
    group 'Build'
    description 'Installs elm test dependencies'
    workingDir elmTestDir
    commandLine 'elm-install'
}

/* This is a hack to prevent t-elm-spec recompile all prod elm sources again. */
task elmMainCompiledCopy(dependsOn: ['elmBuild']){
    doLast {
        copy {
            from webappElm + '/elm-stuff/build-artifacts/0.18.0/ant'
            into elmTestDir + '/elm-stuff/build-artifacts/0.18.0/ant'
        }
    }
}

task elmTest(dependsOn: ['elmMainCompiledCopy'], type: Exec) {
    group 'Verification'
    description 'Runs elm-spec tests'
    workingDir elmTestDir
    commandLine 't-elm-spec', '--color=true'
}


task elmBuild(type: Exec) {
    inputs.files(elmFiles)
    group 'Build'
    description 'Builds elm files'
    workingDir webappElm
    def mains = new FileNameFinder().getFileNames(workingDir.absolutePath, '**/*Main.elm', '**/elm-stuff/**')

    commandLine(['elm-make'] + mains + ['--yes', '--warn', /* '--debug', */ '--output', project.file(targetWebapp + '/elm.js')])
}

//----------------- SASS
FileTree sassFiles = fileTree(dir: project.file(webappSass)).include('**/*.scss')

task sassNuke(type: Delete) {
    group 'Build'
    description 'Removes .sass-cache folder'
    delete webappSass + "/.sass-cache"
}

task sassBuild(type: Exec) {
    inputs.files(sassFiles)
    group 'Build'
    description 'Builds sass files'
    workingDir webappSass

    commandLine(['sass'] + ['--update'] + [workingDir.absolutePath + ':' + project.file(targetWebapp + '/css').absolutePath])
}


//----------------- UI

task uiNuke {
    dependsOn elmNuke
    dependsOn elmTestNuke
    dependsOn sassNuke
}

task uiInstall {
    dependsOn elmInstall
    dependsOn elmTestInstall
}

task uiTest {
    dependsOn elmTest
}

FileTree webappPublicFiles = fileTree(dir: project.file(webappPublic)).include('**/*')

def uiFileCopies = [
        (webappPublicFiles) : targetWebapp,
]

task uiBuild(dependsOn: [elmBuild, sassBuild]) {
    inputs.files(webappPublicFiles)
    doLast {
        uiFileCopies.each { k, v ->
            copy {
                from k
                into v
            }
        }
    }
}
compileScala.dependsOn uiBuild


//----------- MISC
task wrapper(type: Wrapper) {
    gradleVersion = _gradleVersion
}

test.dependsOn(uiTest)
